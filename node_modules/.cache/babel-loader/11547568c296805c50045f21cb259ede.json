{"ast":null,"code":"'use strict';\n/**\n * @fileoverview log4js is a library to log in JavaScript in similar manner\n * than in log4j for Java (but not really).\n *\n * <h3>Example:</h3>\n * <pre>\n *  const logging = require('log4js');\n *  const log = logging.getLogger('some-category');\n *\n *  //call the log\n *  log.trace('trace me' );\n * </pre>\n *\n * NOTE: the authors below are the original browser-based log4js authors\n * don't try to contact them about bugs in this version :)\n * @author Stephan Strittmatter - http://jroller.com/page/stritti\n * @author Seth Chisamore - http://www.chisamore.com\n * @since 2005-05-20\n * Website: http://log4js.berlios.de\n */\n\nvar debug = require('debug')('log4js:main');\n\nvar fs = require('fs');\n\nvar deepClone = require('rfdc')({\n  proto: true\n});\n\nvar configuration = require('./configuration');\n\nvar layouts = require('./layouts');\n\nvar levels = require('./levels');\n\nvar appenders = require('./appenders');\n\nvar categories = require('./categories');\n\nvar Logger = require('./logger');\n\nvar clustering = require('./clustering');\n\nvar connectLogger = require('./connect-logger');\n\nvar enabled = false;\n\nfunction sendLogEventToAppender(logEvent) {\n  if (!enabled) return;\n  debug('Received log event ', logEvent);\n  var categoryAppenders = categories.appendersForCategory(logEvent.categoryName);\n  categoryAppenders.forEach(function (appender) {\n    appender(logEvent);\n  });\n}\n\nfunction loadConfigurationFile(filename) {\n  if (filename) {\n    debug(\"Loading configuration from \".concat(filename));\n    return JSON.parse(fs.readFileSync(filename, 'utf8'));\n  }\n\n  return filename;\n}\n\nfunction configure(configurationFileOrObject) {\n  var configObject = configurationFileOrObject;\n\n  if (typeof configObject === 'string') {\n    configObject = loadConfigurationFile(configurationFileOrObject);\n  }\n\n  debug(\"Configuration is \".concat(configObject));\n  configuration.configure(deepClone(configObject));\n  clustering.onMessage(sendLogEventToAppender);\n  enabled = true;\n  return log4js;\n}\n/**\n * Shutdown all log appenders. This will first disable all writing to appenders\n * and then call the shutdown function each appender.\n *\n * @params {Function} cb - The callback to be invoked once all appenders have\n *  shutdown. If an error occurs, the callback will be given the error object\n *  as the first argument.\n */\n\n\nfunction shutdown(cb) {\n  debug('Shutdown called. Disabling all log writing.'); // First, disable all writing to appenders. This prevents appenders from\n  // not being able to be drained because of run-away log writes.\n\n  enabled = false; // Call each of the shutdown functions in parallel\n\n  var appendersToCheck = Array.from(appenders.values());\n  var shutdownFunctions = appendersToCheck.reduceRight(function (accum, next) {\n    return next.shutdown ? accum + 1 : accum;\n  }, 0);\n  var completed = 0;\n  var error;\n  debug(\"Found \".concat(shutdownFunctions, \" appenders with shutdown functions.\"));\n\n  function complete(err) {\n    error = error || err;\n    completed += 1;\n    debug(\"Appender shutdowns complete: \".concat(completed, \" / \").concat(shutdownFunctions));\n\n    if (completed >= shutdownFunctions) {\n      debug('All shutdown functions completed.');\n      cb(error);\n    }\n  }\n\n  if (shutdownFunctions === 0) {\n    debug('No appenders with shutdown functions found.');\n    return cb();\n  }\n\n  appendersToCheck.filter(function (a) {\n    return a.shutdown;\n  }).forEach(function (a) {\n    return a.shutdown(complete);\n  });\n  return null;\n}\n/**\n * Get a logger instance.\n * @static\n * @param loggerCategoryName\n * @return {Logger} instance of logger for the category\n */\n\n\nfunction getLogger(category) {\n  if (!enabled) {\n    configure(process.env.LOG4JS_CONFIG || {\n      appenders: {\n        out: {\n          type: 'stdout'\n        }\n      },\n      categories: {\n        default: {\n          appenders: ['out'],\n          level: 'OFF'\n        }\n      }\n    });\n  }\n\n  return new Logger(category || 'default');\n}\n/**\n * @name log4js\n * @namespace Log4js\n * @property getLogger\n * @property configure\n * @property shutdown\n */\n\n\nvar log4js = {\n  getLogger: getLogger,\n  configure: configure,\n  shutdown: shutdown,\n  connectLogger: connectLogger,\n  levels: levels,\n  addLayout: layouts.addLayout\n};\nmodule.exports = log4js;","map":null,"metadata":{},"sourceType":"script"}