{"ast":null,"code":"var debug = require('debug')('log4js:clustering');\n\nvar LoggingEvent = require('./LoggingEvent');\n\nvar configuration = require('./configuration');\n\nvar cluster = require('cluster');\n\nvar listeners = [];\nvar disabled = false;\nvar pm2 = false;\nvar pm2InstanceVar = 'NODE_APP_INSTANCE';\n\nvar isPM2Master = function isPM2Master() {\n  return pm2 && process.env[pm2InstanceVar] === '0';\n};\n\nvar isMaster = function isMaster() {\n  return disabled || cluster.isMaster || isPM2Master();\n};\n\nvar sendToListeners = function sendToListeners(logEvent) {\n  listeners.forEach(function (l) {\n    return l(logEvent);\n  });\n}; // in a multi-process node environment, worker loggers will use\n// process.send\n\n\nvar receiver = function receiver(worker, message) {\n  // prior to node v6, the worker parameter was not passed (args were message, handle)\n  debug('cluster message received from worker ', worker, ': ', message);\n\n  if (worker.topic && worker.data) {\n    message = worker;\n    worker = undefined;\n  }\n\n  if (message && message.topic && message.topic === 'log4js:message') {\n    debug('received message: ', message.data);\n    var logEvent = LoggingEvent.deserialise(message.data);\n    sendToListeners(logEvent);\n  }\n};\n\nconfiguration.addListener(function (config) {\n  // clear out the listeners, because configure has been called.\n  listeners.length = 0;\n  disabled = config.disableClustering;\n  pm2 = config.pm2;\n  pm2InstanceVar = config.pm2InstanceVar || 'NODE_APP_INSTANCE';\n  debug(\"clustering disabled ? \".concat(disabled));\n  debug(\"cluster.isMaster ? \".concat(cluster.isMaster));\n  debug(\"pm2 enabled ? \".concat(pm2));\n  debug(\"pm2InstanceVar = \".concat(pm2InstanceVar));\n  debug(\"process.env[\".concat(pm2InstanceVar, \"] = \").concat(process.env[pm2InstanceVar])); // just in case configure is called after shutdown\n\n  if (pm2) {\n    process.removeListener('message', receiver);\n  }\n\n  if (cluster.removeListener) {\n    cluster.removeListener('message', receiver);\n  }\n\n  if (config.disableClustering) {\n    debug('Not listening for cluster messages, because clustering disabled.');\n  } else if (isPM2Master()) {\n    // PM2 cluster support\n    // PM2 runs everything as workers - install pm2-intercom for this to work.\n    // we only want one of the app instances to write logs\n    debug('listening for PM2 broadcast messages');\n    process.on('message', receiver);\n  } else if (cluster.isMaster) {\n    debug('listening for cluster messages');\n    cluster.on('message', receiver);\n  } else {\n    debug('not listening for messages, because we are not a master process');\n  }\n});\nmodule.exports = {\n  onlyOnMaster: function onlyOnMaster(fn, notMaster) {\n    return isMaster() ? fn() : notMaster;\n  },\n  isMaster: isMaster,\n  send: function send(msg) {\n    if (isMaster()) {\n      sendToListeners(msg);\n    } else {\n      if (!pm2) {\n        msg.cluster = {\n          workerId: cluster.worker.id,\n          worker: process.pid\n        };\n      }\n\n      process.send({\n        topic: 'log4js:message',\n        data: msg.serialise()\n      });\n    }\n  },\n  onMessage: function onMessage(listener) {\n    listeners.push(listener);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}