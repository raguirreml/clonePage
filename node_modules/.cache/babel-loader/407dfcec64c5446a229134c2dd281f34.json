{"ast":null,"code":"var path = require('path');\n\nvar debug = require('debug')('log4js:appenders');\n\nvar configuration = require('../configuration');\n\nvar clustering = require('../clustering');\n\nvar levels = require('../levels');\n\nvar layouts = require('../layouts');\n\nvar adapters = require('./adapters'); // pre-load the core appenders so that webpack can find them\n\n\nvar coreAppenders = new Map();\ncoreAppenders.set('console', require('./console'));\ncoreAppenders.set('stdout', require('./stdout'));\ncoreAppenders.set('stderr', require('./stderr'));\ncoreAppenders.set('file', require('./file'));\ncoreAppenders.set('dateFile', require('./dateFile'));\nvar appenders = new Map();\n\nvar tryLoading = function tryLoading(modulePath, config) {\n  debug('Loading module from ', modulePath);\n\n  try {\n    return require(modulePath); //eslint-disable-line\n  } catch (e) {\n    // if the module was found, and we still got an error, then raise it\n    configuration.throwExceptionIf(config, e.code !== 'MODULE_NOT_FOUND', \"appender \\\"\".concat(modulePath, \"\\\" could not be loaded (error was: \").concat(e, \")\"));\n    return undefined;\n  }\n};\n\nvar loadAppenderModule = function loadAppenderModule(type, config) {\n  return coreAppenders.get(type) || tryLoading(\"./\".concat(type), config) || tryLoading(type, config) || require.main && tryLoading(path.join(path.dirname(require.main.filename), type), config) || tryLoading(path.join(process.cwd(), type), config);\n};\n\nvar createAppender = function createAppender(name, config) {\n  var appenderConfig = config.appenders[name];\n  var appenderModule = loadAppenderModule(appenderConfig.type, config);\n  configuration.throwExceptionIf(config, configuration.not(appenderModule), \"appender \\\"\".concat(name, \"\\\" is not valid (type \\\"\").concat(appenderConfig.type, \"\\\" could not be found)\"));\n\n  if (appenderModule.appender) {\n    debug(\"DEPRECATION: Appender \".concat(appenderConfig.type, \" exports an appender function.\"));\n  }\n\n  if (appenderModule.shutdown) {\n    debug(\"DEPRECATION: Appender \".concat(appenderConfig.type, \" exports a shutdown function.\"));\n  }\n\n  debug(\"\".concat(name, \": clustering.isMaster ? \").concat(clustering.isMaster()));\n  debug(\"\".concat(name, \": appenderModule is \").concat(require('util').inspect(appenderModule))); // eslint-disable-line\n\n  return clustering.onlyOnMaster(function () {\n    debug(\"calling appenderModule.configure for \".concat(name, \" / \").concat(appenderConfig.type));\n    return appenderModule.configure(adapters.modifyConfig(appenderConfig), layouts, function (appender) {\n      return appenders.get(appender);\n    }, levels);\n  }, function () {});\n};\n\nvar setup = function setup(config) {\n  appenders.clear();\n  Object.keys(config.appenders).forEach(function (name) {\n    debug(\"Creating appender \".concat(name));\n    appenders.set(name, createAppender(name, config));\n  });\n};\n\nsetup({\n  appenders: {\n    out: {\n      type: 'stdout'\n    }\n  }\n});\nconfiguration.addListener(function (config) {\n  configuration.throwExceptionIf(config, configuration.not(configuration.anObject(config.appenders)), 'must have a property \"appenders\" of type object.');\n  var appenderNames = Object.keys(config.appenders);\n  configuration.throwExceptionIf(config, configuration.not(appenderNames.length), 'must define at least one appender.');\n  appenderNames.forEach(function (name) {\n    configuration.throwExceptionIf(config, configuration.not(config.appenders[name].type), \"appender \\\"\".concat(name, \"\\\" is not valid (must be an object with property \\\"type\\\")\"));\n  });\n});\nconfiguration.addListener(setup);\nmodule.exports = appenders;","map":null,"metadata":{},"sourceType":"script"}