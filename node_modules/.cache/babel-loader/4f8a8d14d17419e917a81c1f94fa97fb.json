{"ast":null,"code":"/* eslint no-underscore-dangle:0 */\n'use strict';\n\nvar _classCallCheck = require(\"D:\\\\Users\\\\c05917\\\\Desktop\\\\redux\\\\chrome-api\\\\chrome\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:\\\\Users\\\\c05917\\\\Desktop\\\\redux\\\\chrome-api\\\\chrome\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar debug = require('debug')('log4js:logger');\n\nvar LoggingEvent = require('./LoggingEvent');\n\nvar levels = require('./levels');\n\nvar clustering = require('./clustering');\n\nvar categories = require('./categories');\n\nvar configuration = require('./configuration');\n/**\n * Logger to log messages.\n * use {@see log4js#getLogger(String)} to get an instance.\n *\n * @name Logger\n * @namespace Log4js\n * @param name name of category to log to\n * @param level - the loglevel for the category\n * @param dispatch - the function which will receive the logevents\n *\n * @author Stephan Strittmatter\n */\n\n\nvar Logger =\n/*#__PURE__*/\nfunction () {\n  function Logger(name) {\n    _classCallCheck(this, Logger);\n\n    if (!name) {\n      throw new Error('No category provided.');\n    }\n\n    this.category = name;\n    this.context = {};\n    debug(\"Logger created (\".concat(this.category, \", \").concat(this.level, \")\"));\n  }\n\n  _createClass(Logger, [{\n    key: \"log\",\n    value: function log(level) {\n      var logLevel = levels.getLevel(level, levels.INFO);\n\n      if (this.isLevelEnabled(logLevel)) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        this._log(logLevel, args);\n      }\n    }\n  }, {\n    key: \"isLevelEnabled\",\n    value: function isLevelEnabled(otherLevel) {\n      return this.level.isLessThanOrEqualTo(otherLevel);\n    }\n  }, {\n    key: \"_log\",\n    value: function _log(level, data) {\n      debug(\"sending log data (\".concat(level, \") to appenders\"));\n      var loggingEvent = new LoggingEvent(this.category, level, data, this.context);\n      clustering.send(loggingEvent);\n    }\n  }, {\n    key: \"addContext\",\n    value: function addContext(key, value) {\n      this.context[key] = value;\n    }\n  }, {\n    key: \"removeContext\",\n    value: function removeContext(key) {\n      delete this.context[key];\n    }\n  }, {\n    key: \"clearContext\",\n    value: function clearContext() {\n      this.context = {};\n    }\n  }, {\n    key: \"level\",\n    get: function get() {\n      return levels.getLevel(categories.getLevelForCategory(this.category), levels.TRACE);\n    },\n    set: function set(level) {\n      categories.setLevelForCategory(this.category, levels.getLevel(level, this.level));\n    }\n  }]);\n\n  return Logger;\n}();\n\nfunction addLevelMethods(target) {\n  var level = levels.getLevel(target);\n  var levelStrLower = level.toString().toLowerCase();\n  var levelMethod = levelStrLower.replace(/_([a-z])/g, function (g) {\n    return g[1].toUpperCase();\n  });\n  var isLevelMethod = levelMethod[0].toUpperCase() + levelMethod.slice(1);\n\n  Logger.prototype[\"is\".concat(isLevelMethod, \"Enabled\")] = function () {\n    return this.isLevelEnabled(level);\n  };\n\n  Logger.prototype[levelMethod] = function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    this.log.apply(this, [level].concat(args));\n  };\n}\n\nlevels.levels.forEach(addLevelMethods);\nconfiguration.addListener(function () {\n  levels.levels.forEach(addLevelMethods);\n});\nmodule.exports = Logger;","map":null,"metadata":{},"sourceType":"script"}