{"ast":null,"code":"var configuration = require('./configuration');\n\nvar levels = require('./levels');\n\nvar appenders = require('./appenders');\n\nvar debug = require('debug')('log4js:categories');\n\nvar categories = new Map();\nconfiguration.addListener(function (config) {\n  configuration.throwExceptionIf(config, configuration.not(configuration.anObject(config.categories)), 'must have a property \"categories\" of type object.');\n  var categoryNames = Object.keys(config.categories);\n  configuration.throwExceptionIf(config, configuration.not(categoryNames.length), 'must define at least one category.');\n  categoryNames.forEach(function (name) {\n    var category = config.categories[name];\n    configuration.throwExceptionIf(config, [configuration.not(category.appenders), configuration.not(category.level)], \"category \\\"\".concat(name, \"\\\" is not valid (must be an object with properties \\\"appenders\\\" and \\\"level\\\")\"));\n    configuration.throwExceptionIf(config, configuration.not(Array.isArray(category.appenders)), \"category \\\"\".concat(name, \"\\\" is not valid (appenders must be an array of appender names)\"));\n    configuration.throwExceptionIf(config, configuration.not(category.appenders.length), \"category \\\"\".concat(name, \"\\\" is not valid (appenders must contain at least one appender name)\"));\n    category.appenders.forEach(function (appender) {\n      configuration.throwExceptionIf(config, configuration.not(appenders.get(appender)), \"category \\\"\".concat(name, \"\\\" is not valid (appender \\\"\").concat(appender, \"\\\" is not defined)\"));\n    });\n    configuration.throwExceptionIf(config, configuration.not(levels.getLevel(category.level)), \"category \\\"\".concat(name, \"\\\" is not valid (level \\\"\").concat(category.level, \"\\\" not recognised;\") + \" valid levels are \".concat(levels.levels.join(', '), \")\"));\n  });\n  configuration.throwExceptionIf(config, configuration.not(config.categories.default), 'must define a \"default\" category.');\n});\n\nvar setup = function setup(config) {\n  categories.clear();\n  var categoryNames = Object.keys(config.categories);\n  categoryNames.forEach(function (name) {\n    var category = config.categories[name];\n    var categoryAppenders = [];\n    category.appenders.forEach(function (appender) {\n      categoryAppenders.push(appenders.get(appender));\n      debug(\"Creating category \".concat(name));\n      categories.set(name, {\n        appenders: categoryAppenders,\n        level: levels.getLevel(category.level)\n      });\n    });\n  });\n};\n\nsetup({\n  categories: {\n    default: {\n      appenders: ['out'],\n      level: 'OFF'\n    }\n  }\n});\nconfiguration.addListener(setup);\n\nvar configForCategory = function configForCategory(category) {\n  debug(\"configForCategory: searching for config for \".concat(category));\n\n  if (categories.has(category)) {\n    debug(\"configForCategory: \".concat(category, \" exists in config, returning it\"));\n    return categories.get(category);\n  }\n\n  if (category.indexOf('.') > 0) {\n    debug(\"configForCategory: \".concat(category, \" has hierarchy, searching for parents\"));\n    return configForCategory(category.substring(0, category.lastIndexOf('.')));\n  }\n\n  debug('configForCategory: returning config for default category');\n  return configForCategory('default');\n};\n\nvar appendersForCategory = function appendersForCategory(category) {\n  return configForCategory(category).appenders;\n};\n\nvar getLevelForCategory = function getLevelForCategory(category) {\n  return configForCategory(category).level;\n};\n\nvar setLevelForCategory = function setLevelForCategory(category, level) {\n  var categoryConfig = categories.get(category);\n  debug(\"setLevelForCategory: found \".concat(categoryConfig, \" for \").concat(category));\n\n  if (!categoryConfig) {\n    var sourceCategoryConfig = configForCategory(category);\n    debug('setLevelForCategory: no config found for category, ' + \"found \".concat(sourceCategoryConfig, \" for parents of \").concat(category));\n    categoryConfig = {\n      appenders: sourceCategoryConfig.appenders\n    };\n  }\n\n  categoryConfig.level = level;\n  categories.set(category, categoryConfig);\n};\n\nmodule.exports = {\n  appendersForCategory: appendersForCategory,\n  getLevelForCategory: getLevelForCategory,\n  setLevelForCategory: setLevelForCategory\n};","map":null,"metadata":{},"sourceType":"script"}