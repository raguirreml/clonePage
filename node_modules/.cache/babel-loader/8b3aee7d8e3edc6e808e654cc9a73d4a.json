{"ast":null,"code":"'use strict';\n\nvar util = require('util');\n\nvar debug = require('debug')('log4js:configuration');\n\nvar listeners = [];\n\nvar not = function not(thing) {\n  return !thing;\n};\n\nvar anObject = function anObject(thing) {\n  return thing && typeof thing === 'object' && !Array.isArray(thing);\n};\n\nvar validIdentifier = function validIdentifier(thing) {\n  return /^[A-Za-z][A-Za-z0-9_]*$/g.test(thing);\n};\n\nvar anInteger = function anInteger(thing) {\n  return thing && typeof thing === 'number' && Number.isInteger(thing);\n};\n\nvar addListener = function addListener(fn) {\n  listeners.push(fn);\n  debug(\"Added listener, listeners now \".concat(listeners.length));\n};\n\nvar throwExceptionIf = function throwExceptionIf(config, checks, message) {\n  var tests = Array.isArray(checks) ? checks : [checks];\n  tests.forEach(function (test) {\n    if (test) {\n      throw new Error(\"Problem with log4js configuration: (\".concat(util.inspect(config, {\n        depth: 5\n      }), \")\") + \" - \".concat(message));\n    }\n  });\n};\n\nvar configure = function configure(candidate) {\n  debug('New configuration to be validated: ', candidate);\n  throwExceptionIf(candidate, not(anObject(candidate)), 'must be an object.');\n  debug(\"Calling configuration listeners (\".concat(listeners.length, \")\"));\n  listeners.forEach(function (listener) {\n    return listener(candidate);\n  });\n  debug('Configuration finished.');\n};\n\nmodule.exports = {\n  configure: configure,\n  addListener: addListener,\n  throwExceptionIf: throwExceptionIf,\n  anObject: anObject,\n  anInteger: anInteger,\n  validIdentifier: validIdentifier,\n  not: not\n};","map":null,"metadata":{},"sourceType":"script"}