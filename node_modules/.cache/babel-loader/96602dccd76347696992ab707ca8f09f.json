{"ast":null,"code":"'use strict';\n\nvar debug = require('debug')('log4js:file');\n\nvar path = require('path');\n\nvar streams = require('streamroller');\n\nvar os = require('os');\n\nvar eol = os.EOL || '\\n';\n\nfunction openTheStream(file, fileSize, numFiles, options) {\n  var stream = new streams.RollingFileStream(file, fileSize, numFiles, options);\n  stream.on('error', function (err) {\n    console.error('log4js.fileAppender - Writing to file %s, error happened ', file, err); //eslint-disable-line\n  });\n  return stream;\n}\n/**\n * File Appender writing the logs to a text file. Supports rolling of logs by size.\n *\n * @param file file log messages will be written to\n * @param layout a function that takes a logEvent and returns a string\n *   (defaults to basicLayout).\n * @param logSize - the maximum size (in bytes) for a log file,\n *   if not provided then logs won't be rotated.\n * @param numBackups - the number of log files to keep after logSize\n *   has been reached (default 5)\n * @param options - options to be passed to the underlying stream\n * @param timezoneOffset - optional timezone offset in minutes (default system local)\n */\n\n\nfunction fileAppender(file, layout, logSize, numBackups, options, timezoneOffset) {\n  file = path.normalize(file);\n  numBackups = numBackups === undefined ? 5 : numBackups; // there has to be at least one backup if logSize has been specified\n\n  numBackups = numBackups === 0 ? 1 : numBackups;\n  debug('Creating file appender (', file, ', ', logSize, ', ', numBackups, ', ', options, ', ', timezoneOffset, ')');\n  var writer = openTheStream(file, logSize, numBackups, options);\n\n  var app = function app(loggingEvent) {\n    writer.write(layout(loggingEvent, timezoneOffset) + eol, 'utf8');\n  };\n\n  app.reopen = function () {\n    writer.closeTheStream(writer.openTheStream.bind(writer));\n  };\n\n  app.sighupHandler = function () {\n    debug('SIGHUP handler called.');\n    app.reopen();\n  };\n\n  app.shutdown = function (complete) {\n    process.removeListener('SIGHUP', app.sighupHandler);\n    writer.write('', 'utf-8', function () {\n      writer.end(complete);\n    });\n  }; // On SIGHUP, close and reopen all files. This allows this appender to work with\n  // logrotate. Note that if you are using logrotate, you should not set\n  // `logSize`.\n\n\n  process.on('SIGHUP', app.sighupHandler);\n  return app;\n}\n\nfunction configure(config, layouts) {\n  var layout = layouts.basicLayout;\n\n  if (config.layout) {\n    layout = layouts.layout(config.layout.type, config.layout);\n  }\n\n  return fileAppender(config.filename, layout, config.maxLogSize, config.backups, config, config.timezoneOffset);\n}\n\nmodule.exports.configure = configure;","map":null,"metadata":{},"sourceType":"script"}