{"ast":null,"code":"import _objectSpread from \"/home/richard/Escritorio/clonePage/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/richard/Escritorio/clonePage/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/richard/Escritorio/clonePage/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/richard/Escritorio/clonePage/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/richard/Escritorio/clonePage/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/richard/Escritorio/clonePage/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/richard/Escritorio/clonePage/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/richard/Escritorio/clonePage/src/Componentes/PageCopy.js\";\nimport React, { Component } from 'react';\nimport '../App.css';\nimport axios from 'axios';\nimport $ from 'jquery';\nimport HashMap from 'hashmap';\nimport logger from '../Utils/Log';\n/**\r\n * Clase que representa una pagina clonada (con la captura de todo input en un log)\r\n */\n\nvar PageCopy =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PageCopy, _Component);\n\n  function PageCopy() {\n    var _this;\n\n    _classCallCheck(this, PageCopy);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PageCopy).call(this));\n    _this.state = {\n      url: '',\n      boddy: '',\n      hasmapState: new HashMap()\n    };\n    _this.modificado = false;\n    _this.cambioInput = _this.cambioInput.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.adaptarHTML = _this.adaptarHTML.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(PageCopy, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      debugger;\n      window.cambioInput = this.cambioInput;\n      var url = this.props.location.pathname + this.props.location.search; //arma la url para clonar\n\n      var urlAClonar = 'https:/' + url;\n      logger.info('El url a consumir por axios es: ' + urlAClonar);\n      var principal = this;\n      axios.get(urlAClonar, {\n        method: 'GET',\n        mode: 'no-cors',\n        headers: {\n          'Access-Control-Allow-Origin': '*',\n          'Content-Type': 'application/json'\n        },\n        withCredentials: true,\n        credentials: 'same-origin'\n      }).then(function (response) {\n        //guardamos el response en el state\n        logger.info('Recibimos el response correctamente.');\n        debugger;\n        principal.setState(_objectSpread({}, principal.state, {\n          boddy: response.data,\n          url: urlAClonar\n        }));\n      }).catch(function (error) {\n        logger.error(error);\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.myfunc = null;\n    } //capturamos las modificaciones en los input para luego logearlas\n\n  }, {\n    key: \"cambioInput\",\n    value: function cambioInput(e) {\n      var id = e.id;\n      var value = e.value;\n      this.setState(_objectSpread({}, this.state, {\n        hasmapState: this.state.hasmapState.set(id, value)\n      }));\n      logger.info(this.state.url + \" se ingreso en el input id:\" + id + \" el valor:\" + value);\n    } //modifico el html del response, para todo input, si tiene id lo dejo, si no tiene le seteo un id y agrego el evento onChange\n\n  }, {\n    key: \"adaptarHTML\",\n    value: function adaptarHTML() {\n      debugger; //let boddy = '<div><form><input type=\"search\"/><input type=\"search\" id=\"BBB\"/></form></div>'; DUMMY\n\n      var boddy = this.state.boddy;\n      var processedHTML = '';\n      var counter = 1;\n      var $div = $('<div>').html(boddy); //busca los input y les agrega un id (si no lo tienen) y el evento onchange\n\n      $div.find('input').attr({\n        \"onChange\": \"window.cambioInput(this)\",\n        'id': function id() {\n          if (this.id === null || this.id === \"\") {\n            this.id = \"ID-GENERADO-\" + counter;\n            counter++;\n          }\n        }\n      });\n      processedHTML = $div.html();\n\n      if (boddy !== \"\" && this.modificado === false) {\n        if (counter > 1) {\n          logger.info(\"El HTML fue modificado correctamente.\");\n        } else {\n          logger.info(\"El HTML no contiene inputs.\");\n        }\n\n        this.modificado = true;\n      }\n\n      return processedHTML;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        dangerouslySetInnerHTML: {\n          __html: this.adaptarHTML()\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return PageCopy;\n}(Component);\n\nexport default PageCopy;","map":{"version":3,"sources":["/home/richard/Escritorio/clonePage/src/Componentes/PageCopy.js"],"names":["React","Component","axios","$","HashMap","logger","PageCopy","state","url","boddy","hasmapState","modificado","cambioInput","bind","adaptarHTML","window","props","location","pathname","search","urlAClonar","info","principal","get","method","mode","headers","withCredentials","credentials","then","response","setState","data","catch","error","myfunc","e","id","value","set","processedHTML","counter","$div","html","find","attr","__html"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport axios from 'axios';\r\nimport $ from 'jquery';\r\nimport HashMap from 'hashmap';\r\nimport logger from '../Utils/Log';\r\n\r\n\r\n/**\r\n * Clase que representa una pagina clonada (con la captura de todo input en un log)\r\n */\r\nclass PageCopy extends Component {\r\n    \r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            url : '',\r\n            boddy: '',\r\n            hasmapState: new HashMap()\r\n        }\r\n        this.modificado = false;\r\n        this.cambioInput = this.cambioInput.bind(this);\r\n        this.adaptarHTML = this.adaptarHTML.bind(this);\r\n    }\r\n    \r\n    componentDidMount () {\r\n        debugger;\r\n        window.cambioInput = this.cambioInput;\r\n        let url = this.props.location.pathname + this.props.location.search\r\n        \r\n        //arma la url para clonar\r\n        let urlAClonar = 'https:/' + url\r\n        logger.info('El url a consumir por axios es: ' + urlAClonar)\r\n                \r\n        const principal = this;\r\n        axios.get(urlAClonar,{\r\n            method: 'GET',\r\n            mode: 'no-cors',\r\n            headers: {\r\n              'Access-Control-Allow-Origin': '*',\r\n              'Content-Type': 'application/json',\r\n            },\r\n            withCredentials: true,\r\n            credentials: 'same-origin',\r\n          })\r\n        .then(function (response) {\r\n            //guardamos el response en el state\r\n            logger.info('Recibimos el response correctamente.');\r\n            debugger;\r\n            principal.setState({\r\n                ...principal.state,\r\n                boddy: response.data,\r\n                url : urlAClonar\r\n            })\r\n        })\r\n        .catch(function (error) {\r\n            logger.error(error);\r\n        });\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.myfunc = null;\r\n    }\r\n\r\n    //capturamos las modificaciones en los input para luego logearlas\r\n    cambioInput(e){\r\n        let id = e.id;\r\n        let value = e.value;\r\n        this.setState({\r\n            ...this.state,\r\n            hasmapState: this.state.hasmapState.set(id,value),\r\n        })\r\n        logger.info(this.state.url + \" se ingreso en el input id:\" + id + \" el valor:\" + value);\r\n    }\r\n\r\n    //modifico el html del response, para todo input, si tiene id lo dejo, si no tiene le seteo un id y agrego el evento onChange\r\n    adaptarHTML(){\r\n        debugger;\r\n        //let boddy = '<div><form><input type=\"search\"/><input type=\"search\" id=\"BBB\"/></form></div>'; DUMMY\r\n        let boddy = this.state.boddy;\r\n        \r\n        let processedHTML = '';\r\n        \r\n            let counter = 1;\r\n            let $div = $('<div>').html(boddy);\r\n                \r\n                //busca los input y les agrega un id (si no lo tienen) y el evento onchange\r\n                $div.find('input').attr({\"onChange\":\"window.cambioInput(this)\",'id':function(){\r\n                    if (this.id === null || this.id ===\"\"){\r\n                        this.id = \"ID-GENERADO-\" + counter;\r\n                        counter++;\r\n                    }\r\n                }});\r\n                processedHTML = $div.html();\r\n            if (boddy !== \"\" && this.modificado === false){\r\n                \r\n                if (counter> 1){\r\n                    logger.info(\"El HTML fue modificado correctamente.\");\r\n                }else{\r\n                    logger.info(\"El HTML no contiene inputs.\");\r\n                }\r\n                this.modificado = true;\r\n                \r\n            }\r\n            return processedHTML;\r\n    }\r\n    \r\n  render() {\r\n    return (\r\n        <div className=\"container\">\r\n            {/* Esto devuelve el html de la pagina ya modificado */}\r\n            <div dangerouslySetInnerHTML={{ __html: this.adaptarHTML() }}/>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PageCopy;\r\n"]},"metadata":{},"sourceType":"module"}