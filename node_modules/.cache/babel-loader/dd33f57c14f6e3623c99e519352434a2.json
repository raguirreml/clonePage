{"ast":null,"code":"'use strict';\n\nfunction maxFileSizeUnitTransform(maxLogSize) {\n  if (typeof maxLogSize === 'number' && Number.isInteger(maxLogSize)) {\n    return maxLogSize;\n  }\n\n  var units = {\n    K: 1024,\n    M: 1024 * 1024,\n    G: 1024 * 1024 * 1024\n  };\n  var validUnit = Object.keys(units);\n  var unit = maxLogSize.substr(maxLogSize.length - 1).toLocaleUpperCase();\n  var value = maxLogSize.substring(0, maxLogSize.length - 1).trim();\n\n  if (validUnit.indexOf(unit) < 0 || !Number.isInteger(Number(value))) {\n    throw Error(\"maxLogSize: \\\"\".concat(maxLogSize, \"\\\" is invalid\"));\n  } else {\n    return value * units[unit];\n  }\n}\n\nfunction adapter(configAdapter, config) {\n  var newConfig = Object.assign({}, config);\n  Object.keys(configAdapter).forEach(function (key) {\n    if (newConfig[key]) {\n      newConfig[key] = configAdapter[key](config[key]);\n    }\n  });\n  return newConfig;\n}\n\nfunction fileAppenderAdapter(config) {\n  var configAdapter = {\n    maxLogSize: maxFileSizeUnitTransform\n  };\n  return adapter(configAdapter, config);\n}\n\nvar adapters = {\n  file: fileAppenderAdapter,\n  fileSync: fileAppenderAdapter\n};\n\nmodule.exports.modifyConfig = function (config) {\n  return adapters[config.type] ? adapters[config.type](config) : config;\n};","map":null,"metadata":{},"sourceType":"script"}