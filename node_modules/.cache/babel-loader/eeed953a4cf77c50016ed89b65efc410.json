{"ast":null,"code":"import _classCallCheck from \"D:\\\\Users\\\\c05917\\\\Desktop\\\\redux\\\\chrome-api\\\\chrome\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\Users\\\\c05917\\\\Desktop\\\\redux\\\\chrome-api\\\\chrome\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\Users\\\\c05917\\\\Desktop\\\\redux\\\\chrome-api\\\\chrome\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Users\\\\c05917\\\\Desktop\\\\redux\\\\chrome-api\\\\chrome\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\Users\\\\c05917\\\\Desktop\\\\redux\\\\chrome-api\\\\chrome\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"D:\\\\Users\\\\c05917\\\\Desktop\\\\redux\\\\chrome-api\\\\chrome\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"D:\\\\Users\\\\c05917\\\\Desktop\\\\redux\\\\chrome-api\\\\chrome\\\\src\\\\Componentes\\\\PageCopy.js\";\nimport React, { Component } from 'react';\nimport '../App.css';\nimport axios from 'axios';\nimport ReactHtmlParser from 'react-html-parser';\nimport $ from 'jquery';\n\nvar PageCopy =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(PageCopy, _Component);\n\n  function PageCopy() {\n    var _this;\n\n    _classCallCheck(this, PageCopy);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PageCopy).call(this));\n    _this.state = {\n      urlToClone: '',\n      boddy: '',\n      profiles: [{\n        key: \"\",\n        contenido: \"\"\n      }]\n    };\n    _this.cambioInput = _this.cambioInput.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.agregoIdEventOnChange = _this.agregoIdEventOnChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.adaptarHTML = _this.adaptarHTML.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(PageCopy, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      debugger;\n      window.cambioInput = this.cambioInput;\n      var url = this.props.location.pathname + this.props.location.search; //logica para clonar la pagina\n\n      var urlAClonar = 'https:/' + url;\n      console.log('El url a consumir por axios es: ' + urlAClonar);\n      var principal = this;\n      axios.get(urlAClonar).then(function (response) {\n        console.log(response);\n        console.log('Recibimos el response' + response.data);\n        principal.setState({\n          boddy: response.data,\n          urlToClone: urlAClonar\n        });\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.myfunc = null;\n    }\n  }, {\n    key: \"cambioInput\",\n    value: function cambioInput(e) {\n      debugger;\n      var id = e.id;\n      var value = e.value; //verifico si ya tengo cargado ese key\n\n      this.setState({\n        urlToClone: this.state.urlToClone,\n        boddy: this.state.boddy,\n        profiles: [{\n          key: id,\n          contenido: value\n        }]\n      });\n      console.log(\"aaaaaaaa\");\n    }\n  }, {\n    key: \"agregoIdEventOnChange\",\n    value: function agregoIdEventOnChange() {\n      debugger;\n      var boddy = '<div><form><input type=\"search\"/><input type=\"search\" id=\"BBB\"/></form></div>';\n      var counter = '1';\n      var $div = $('<div>').html(boddy);\n      $div.find('input').attr({\n        \"onChange\": \"window.cambioInput(this)\",\n        'id': function id() {\n          if (this.id === null || this.id === \"\") {\n            this.id = \"AA-\" + counter;\n          }\n\n          counter++;\n        }\n      });\n      var processedHTML = $div.html();\n      return processedHTML;\n    }\n  }, {\n    key: \"adaptarHTML\",\n    value: function adaptarHTML() {\n      debugger; //modifico el html\n      //1.- para todo input, si tiene id lo dejo, si no tiene le seteo un id\n      //2.- agrego el evento onChange\n\n      var newHTML = this.agregoIdEventOnChange(); //3.- creo la funcion que por cada onChange va actualizando en un hashmap \n      // por cada input_id el value\n      //convierto a jsx\n      //let resultado =  ReactHtmlParser(newHTML);\n\n      debugger;\n      return newHTML;\n    } //<div>{ ReactHtmlParser(this.adaptarHTML()) }</div>\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        onClick: this.cambioInput,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        dangerouslySetInnerHTML: {\n          __html: this.adaptarHTML()\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return PageCopy;\n}(Component);\n\nexport default PageCopy;","map":{"version":3,"sources":["D:\\Users\\c05917\\Desktop\\redux\\chrome-api\\chrome\\src\\Componentes\\PageCopy.js"],"names":["React","Component","axios","ReactHtmlParser","$","PageCopy","state","urlToClone","boddy","profiles","key","contenido","cambioInput","bind","agregoIdEventOnChange","adaptarHTML","window","url","props","location","pathname","search","urlAClonar","console","log","principal","get","then","response","data","setState","catch","error","myfunc","e","id","value","counter","$div","html","find","attr","processedHTML","newHTML","__html"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport '../App.css';\r\nimport axios from 'axios';\r\nimport ReactHtmlParser from 'react-html-parser';\r\nimport $ from 'jquery';\r\n\r\nclass PageCopy extends Component {\r\n    \r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            urlToClone : '',\r\n            boddy: '',\r\n            profiles: [{key:\"\",contenido:\"\"}]\r\n        }\r\n        this.cambioInput = this.cambioInput.bind(this);\r\n        this.agregoIdEventOnChange = this.agregoIdEventOnChange.bind(this);\r\n        this.adaptarHTML = this.adaptarHTML.bind(this);\r\n       \r\n    }\r\n    \r\n    componentDidMount () {\r\n        debugger\r\n        window.cambioInput = this.cambioInput;\r\n        let url = this.props.location.pathname + this.props.location.search\r\n        \r\n        //logica para clonar la pagina\r\n        let urlAClonar = 'https:/' + url\r\n\r\n        \r\n        console.log('El url a consumir por axios es: ' + urlAClonar);\r\n        \r\n        const principal = this;\r\n        axios.get(urlAClonar)\r\n        .then(function (response) {\r\n            console.log(response);\r\n            console.log('Recibimos el response' + response.data);\r\n\r\n            principal.setState({\r\n                boddy: response.data,\r\n                urlToClone : urlAClonar\r\n            })\r\n\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error);\r\n        });\r\n\r\n        \r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.myfunc = null;\r\n    }\r\n\r\n    cambioInput(e){\r\n        debugger;\r\n        \r\n        let id = e.id;\r\n        let value = e.value;\r\n\r\n        //verifico si ya tengo cargado ese key\r\n        \r\n        this.setState({\r\n            urlToClone : this.state.urlToClone,\r\n            boddy: this.state.boddy,\r\n            profiles: [{key:id,contenido:value}]\r\n        })\r\n        console.log(\"aaaaaaaa\")\r\n    }\r\n\r\n    agregoIdEventOnChange(){\r\n        debugger;\r\n        let boddy = '<div><form><input type=\"search\"/><input type=\"search\" id=\"BBB\"/></form></div>';\r\n        let counter = '1';\r\n        let $div = $('<div>').html(boddy);\r\n       \r\n        \r\n        $div.find('input').attr({\"onChange\":\"window.cambioInput(this)\",'id':function(){\r\n            if (this.id === null || this.id ===\"\"){\r\n                this.id = \"AA-\" + counter;\r\n            }\r\n            counter++;\r\n        }});\r\n\r\n        let processedHTML = $div.html();\r\n\r\n        return processedHTML;\r\n    }\r\n    \r\n    adaptarHTML(){\r\n        debugger;\r\n        //modifico el html\r\n        //1.- para todo input, si tiene id lo dejo, si no tiene le seteo un id\r\n        //2.- agrego el evento onChange\r\n        let newHTML = this.agregoIdEventOnChange();\r\n        \r\n\r\n        //3.- creo la funcion que por cada onChange va actualizando en un hashmap \r\n        // por cada input_id el value\r\n\r\n        //convierto a jsx\r\n        //let resultado =  ReactHtmlParser(newHTML);\r\n        debugger;\r\n        return newHTML;\r\n    }\r\n\r\n    \r\n//<div>{ ReactHtmlParser(this.adaptarHTML()) }</div>\r\n  render() {\r\n    return (\r\n        <div className=\"container\">\r\n        <button onClick={this.cambioInput}/>\r\n            <div dangerouslySetInnerHTML={{ __html: this.adaptarHTML() }}\r\n            />\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PageCopy;\r\n"]},"metadata":{},"sourceType":"module"}