{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"D:\\\\Users\\\\c05917\\\\Desktop\\\\redux\\\\chrome-api\\\\chrome\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"D:\\\\Users\\\\c05917\\\\Desktop\\\\redux\\\\chrome-api\\\\chrome\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar configuration = require('./configuration');\n\nvar validColours = ['white', 'grey', 'black', 'blue', 'cyan', 'green', 'magenta', 'red', 'yellow'];\n\nvar Level =\n/*#__PURE__*/\nfunction () {\n  function Level(level, levelStr, colour) {\n    _classCallCheck(this, Level);\n\n    this.level = level;\n    this.levelStr = levelStr;\n    this.colour = colour;\n  }\n\n  _createClass(Level, [{\n    key: \"toString\",\n    value: function toString() {\n      return this.levelStr;\n    }\n    /**\n     * converts given String to corresponding Level\n     * @param {Level|String} sArg -- String value of Level OR Log4js.Level\n     * @param {Level} [defaultLevel] -- default Level, if no String representation\n     * @return {Level}\n     */\n\n  }, {\n    key: \"isLessThanOrEqualTo\",\n    value: function isLessThanOrEqualTo(otherLevel) {\n      if (typeof otherLevel === 'string') {\n        otherLevel = Level.getLevel(otherLevel);\n      }\n\n      return this.level <= otherLevel.level;\n    }\n  }, {\n    key: \"isGreaterThanOrEqualTo\",\n    value: function isGreaterThanOrEqualTo(otherLevel) {\n      if (typeof otherLevel === 'string') {\n        otherLevel = Level.getLevel(otherLevel);\n      }\n\n      return this.level >= otherLevel.level;\n    }\n  }, {\n    key: \"isEqualTo\",\n    value: function isEqualTo(otherLevel) {\n      if (typeof otherLevel === 'string') {\n        otherLevel = Level.getLevel(otherLevel);\n      }\n\n      return this.level === otherLevel.level;\n    }\n  }], [{\n    key: \"getLevel\",\n    value: function getLevel(sArg, defaultLevel) {\n      if (!sArg) {\n        return defaultLevel;\n      }\n\n      if (sArg instanceof Level) {\n        return sArg;\n      } // a json-serialised level won't be an instance of Level (see issue #768)\n\n\n      if (sArg instanceof Object && sArg.levelStr) {\n        sArg = sArg.levelStr;\n      }\n\n      if (typeof sArg === 'string') {\n        return Level[sArg.toUpperCase()] || defaultLevel;\n      }\n\n      return Level.getLevel(sArg.toString());\n    }\n  }, {\n    key: \"addLevels\",\n    value: function addLevels(customLevels) {\n      if (customLevels) {\n        var levels = Object.keys(customLevels);\n        levels.forEach(function (l) {\n          var levelStr = l.toUpperCase();\n          Level[levelStr] = new Level(customLevels[l].value, levelStr, customLevels[l].colour);\n          var existingLevelIndex = Level.levels.findIndex(function (lvl) {\n            return lvl.levelStr === levelStr;\n          });\n\n          if (existingLevelIndex > -1) {\n            Level.levels[existingLevelIndex] = Level[levelStr];\n          } else {\n            Level.levels.push(Level[levelStr]);\n          }\n        });\n        Level.levels.sort(function (a, b) {\n          return a.level - b.level;\n        });\n      }\n    }\n  }]);\n\n  return Level;\n}();\n\nLevel.levels = [];\nLevel.addLevels({\n  ALL: {\n    value: Number.MIN_VALUE,\n    colour: 'grey'\n  },\n  TRACE: {\n    value: 5000,\n    colour: 'blue'\n  },\n  DEBUG: {\n    value: 10000,\n    colour: 'cyan'\n  },\n  INFO: {\n    value: 20000,\n    colour: 'green'\n  },\n  WARN: {\n    value: 30000,\n    colour: 'yellow'\n  },\n  ERROR: {\n    value: 40000,\n    colour: 'red'\n  },\n  FATAL: {\n    value: 50000,\n    colour: 'magenta'\n  },\n  MARK: {\n    value: 9007199254740992,\n    colour: 'grey'\n  },\n  // 2^53\n  OFF: {\n    value: Number.MAX_VALUE,\n    colour: 'grey'\n  }\n});\nconfiguration.addListener(function (config) {\n  var levelConfig = config.levels;\n\n  if (levelConfig) {\n    configuration.throwExceptionIf(config, configuration.not(configuration.anObject(levelConfig)), 'levels must be an object');\n    var newLevels = Object.keys(levelConfig);\n    newLevels.forEach(function (l) {\n      configuration.throwExceptionIf(config, configuration.not(configuration.validIdentifier(l)), \"level name \\\"\".concat(l, \"\\\" is not a valid identifier (must start with a letter, only contain A-Z,a-z,0-9,_)\"));\n      configuration.throwExceptionIf(config, configuration.not(configuration.anObject(levelConfig[l])), \"level \\\"\".concat(l, \"\\\" must be an object\"));\n      configuration.throwExceptionIf(config, configuration.not(levelConfig[l].value), \"level \\\"\".concat(l, \"\\\" must have a 'value' property\"));\n      configuration.throwExceptionIf(config, configuration.not(configuration.anInteger(levelConfig[l].value)), \"level \\\"\".concat(l, \"\\\".value must have an integer value\"));\n      configuration.throwExceptionIf(config, configuration.not(levelConfig[l].colour), \"level \\\"\".concat(l, \"\\\" must have a 'colour' property\"));\n      configuration.throwExceptionIf(config, configuration.not(validColours.indexOf(levelConfig[l].colour) > -1), \"level \\\"\".concat(l, \"\\\".colour must be one of \").concat(validColours.join(', ')));\n    });\n  }\n});\nconfiguration.addListener(function (config) {\n  Level.addLevels(config.levels);\n});\nmodule.exports = Level;","map":null,"metadata":{},"sourceType":"script"}