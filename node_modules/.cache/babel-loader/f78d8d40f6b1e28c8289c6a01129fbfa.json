{"ast":null,"code":"'use strict';\n\nfunction padWithZeros(vNumber, width) {\n  var numAsString = vNumber.toString();\n\n  while (numAsString.length < width) {\n    numAsString = '0' + numAsString;\n  }\n\n  return numAsString;\n}\n\nfunction addZero(vNumber) {\n  return padWithZeros(vNumber, 2);\n}\n/**\n * Formats the TimeOffset\n * Thanks to http://www.svendtofte.com/code/date_format/\n * @private\n */\n\n\nfunction offset(timezoneOffset) {\n  var os = Math.abs(timezoneOffset);\n  var h = String(Math.floor(os / 60));\n  var m = String(os % 60);\n\n  if (h.length === 1) {\n    h = '0' + h;\n  }\n\n  if (m.length === 1) {\n    m = '0' + m;\n  }\n\n  return timezoneOffset < 0 ? '+' + h + m : '-' + h + m;\n}\n\nfunction datePart(date, displayUTC, part) {\n  return displayUTC ? date['getUTC' + part]() : date['get' + part]();\n}\n\nfunction asString(format, date) {\n  if (typeof format !== 'string') {\n    date = format;\n    format = module.exports.ISO8601_FORMAT;\n  }\n\n  if (!date) {\n    date = module.exports.now();\n  }\n\n  var displayUTC = format.indexOf('O') > -1;\n  var vDay = addZero(datePart(date, displayUTC, 'Date'));\n  var vMonth = addZero(datePart(date, displayUTC, 'Month') + 1);\n  var vYearLong = addZero(datePart(date, displayUTC, 'FullYear'));\n  var vYearShort = addZero(vYearLong.substring(2, 4));\n  var vYear = format.indexOf('yyyy') > -1 ? vYearLong : vYearShort;\n  var vHour = addZero(datePart(date, displayUTC, 'Hours'));\n  var vMinute = addZero(datePart(date, displayUTC, 'Minutes'));\n  var vSecond = addZero(datePart(date, displayUTC, 'Seconds'));\n  var vMillisecond = padWithZeros(datePart(date, displayUTC, 'Milliseconds'), 3);\n  var vTimeZone = offset(date.getTimezoneOffset());\n  var formatted = format.replace(/dd/g, vDay).replace(/MM/g, vMonth).replace(/y{1,4}/g, vYear).replace(/hh/g, vHour).replace(/mm/g, vMinute).replace(/ss/g, vSecond).replace(/SSS/g, vMillisecond).replace(/O/g, vTimeZone);\n  return formatted;\n}\n\nfunction extractDateParts(pattern, str) {\n  var matchers = [{\n    pattern: /y{1,4}/,\n    regexp: \"\\\\d{1,4}\",\n    fn: function fn(date, value) {\n      date.setFullYear(value);\n    }\n  }, {\n    pattern: /MM/,\n    regexp: \"\\\\d{1,2}\",\n    fn: function fn(date, value) {\n      date.setMonth(value - 1);\n    }\n  }, {\n    pattern: /dd/,\n    regexp: \"\\\\d{1,2}\",\n    fn: function fn(date, value) {\n      date.setDate(value);\n    }\n  }, {\n    pattern: /hh/,\n    regexp: \"\\\\d{1,2}\",\n    fn: function fn(date, value) {\n      date.setHours(value);\n    }\n  }, {\n    pattern: /mm/,\n    regexp: \"\\\\d\\\\d\",\n    fn: function fn(date, value) {\n      date.setMinutes(value);\n    }\n  }, {\n    pattern: /ss/,\n    regexp: \"\\\\d\\\\d\",\n    fn: function fn(date, value) {\n      date.setSeconds(value);\n    }\n  }, {\n    pattern: /SSS/,\n    regexp: \"\\\\d\\\\d\\\\d\",\n    fn: function fn(date, value) {\n      date.setMilliseconds(value);\n    }\n  }, {\n    pattern: /O/,\n    regexp: \"[+-]\\\\d{3,4}|Z\",\n    fn: function fn(date, value) {\n      if (value === 'Z') {\n        value = 0;\n      }\n\n      var offset = Math.abs(value);\n      var minutes = offset % 100 + Math.floor(offset / 100) * 60;\n      date.setMinutes(date.getMinutes() + (value > 0 ? minutes : -minutes));\n    }\n  }];\n  var parsedPattern = matchers.reduce(function (p, m) {\n    if (m.pattern.test(p.regexp)) {\n      m.index = p.regexp.match(m.pattern).index;\n      p.regexp = p.regexp.replace(m.pattern, \"(\" + m.regexp + \")\");\n    } else {\n      m.index = -1;\n    }\n\n    return p;\n  }, {\n    regexp: pattern,\n    index: []\n  });\n  var dateFns = matchers.filter(function (m) {\n    return m.index > -1;\n  });\n  dateFns.sort(function (a, b) {\n    return a.index - b.index;\n  });\n  var matcher = new RegExp(parsedPattern.regexp);\n  var matches = matcher.exec(str);\n\n  if (matches) {\n    var date = module.exports.now();\n    dateFns.forEach(function (f, i) {\n      f.fn(date, matches[i + 1]);\n    });\n    return date;\n  }\n\n  throw new Error('String \\'' + str + '\\' could not be parsed as \\'' + pattern + '\\'');\n}\n\nfunction parse(pattern, str) {\n  if (!pattern) {\n    throw new Error('pattern must be supplied');\n  }\n\n  return extractDateParts(pattern, str);\n}\n/**\n * Used for testing - replace this function with a fixed date.\n */\n\n\nfunction now() {\n  return new Date();\n}\n\nmodule.exports = asString;\nmodule.exports.asString = asString;\nmodule.exports.parse = parse;\nmodule.exports.now = now;\nmodule.exports.ISO8601_FORMAT = 'yyyy-MM-ddThh:mm:ss.SSS';\nmodule.exports.ISO8601_WITH_TZ_OFFSET_FORMAT = 'yyyy-MM-ddThh:mm:ss.SSSO';\nmodule.exports.DATETIME_FORMAT = 'dd MM yyyy hh:mm:ss.SSS';\nmodule.exports.ABSOLUTETIME_FORMAT = 'hh:mm:ss.SSS';","map":null,"metadata":{},"sourceType":"script"}